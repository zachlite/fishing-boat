{"version":3,"sources":["node_modules/gl-matrix/esm/common.js","node_modules/gl-matrix/esm/mat2.js","node_modules/gl-matrix/esm/mat2d.js","node_modules/gl-matrix/esm/mat3.js","node_modules/gl-matrix/esm/mat4.js","node_modules/gl-matrix/esm/vec3.js","node_modules/gl-matrix/esm/vec4.js","node_modules/gl-matrix/esm/quat.js","node_modules/gl-matrix/esm/quat2.js","node_modules/gl-matrix/esm/vec2.js","node_modules/gl-matrix/esm/index.js","src/constants.ts","src/gltf-constants.ts","src/gltf-utils.ts","src/utils.ts","node_modules/angle-normals/angle-normals.js","src/render-factory.ts","src/renderable.ts","src/pbr-shaders.ts","src/depth-buffer-shaders.ts","src/ocean.ts","node_modules/primitive-cube/index.js","src/debug-depth-camera.ts","wave.ts","node_modules/primitive-plane/index.js","ripple.ts","node_modules/mouse-event/mouse.js","node_modules/mouse-change/mouse-listen.js","node_modules/parse-unit/index.js","node_modules/to-px/browser.js","node_modules/mouse-wheel/wheel.js","node_modules/gl-mat4/identity.js","node_modules/gl-mat4/perspective.js","node_modules/gl-mat4/lookAt.js","node_modules/regl-camera/regl-camera.js","main.ts"],"names":["EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","setMatrixArrayType","type","degree","PI","toRadian","a","equals","b","abs","max","hypot","i","y","arguments","length","sqrt","create","out","glMatrix","clone","copy","identity","fromValues","m00","m01","m10","m11","set","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b0","b1","b2","b3","rotate","rad","s","sin","c","cos","scale","v","v0","v1","fromRotation","fromScaling","str","frob","LDU","L","D","U","add","subtract","exactEquals","multiplyScalar","multiplyScalarAndAdd","mul","sub","d","tx","ty","aa","ab","ac","ad","atx","aty","a4","a5","b4","b5","translate","fromTranslation","fromMat4","m02","m12","m20","m21","m22","a01","a02","a12","a00","a10","a11","a20","a21","a22","b01","b11","b21","b00","b02","b10","b12","b20","b22","x","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","a6","a7","a8","b6","b7","b8","m03","m13","m23","m30","m31","m32","m33","axis","t","len","rotateX","rotateY","rotateZ","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","a9","a14","a15","b9","b13","b14","b15","divide","ceil","floor","min","round","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","r","zScale","transformMat4","m","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","p","angle","mag","cosine","acos","zero","div","dist","sqrDist","sqrLen","forEach","vec","stride","offset","count","fn","arg","l","u","A","B","C","E","F","G","H","I","J","v2","v3","v4","s1","s2","ix","iy","iz","iw","setAxisAngle","getAxisAngle","out_axis","getAngle","dotproduct","calculateW","exp","et","ln","atan2","log","pow","slerp","omega","cosom","sinom","scale0","scale1","u1","u2","u3","sqrt1MinusU1","sqrtU1","invDot","conjugate","fromMat3","fTrace","fRoot","j","k","fromEuler","halfToRad","cx","cy","cz","vec4","rotationTo","tmpvec3","vec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","mat3","view","dq","w1","fromRotationTranslationValues","outer","quat","mat4","getReal","getDual","setReal","setDual","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","axisLength","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","mt","sqlen","a_dot_b","transformMat2","transformMat2d","p0","p1","sinC","cosC"],"mappings":"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","file":"main.ce12c8b4.js","sourceRoot":"..","sourcesContent":["/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\n\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {ReadonlyMat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3]);\n}\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {ReadonlyMat2} L the lower triangular matrix\r\n * @param {ReadonlyMat2} D the diagonal matrix\r\n * @param {ReadonlyMat2} U the upper triangular matrix\r\n * @param {ReadonlyMat2} a the input matrix to factorize\r\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat2} a The first matrix.\r\n * @param {ReadonlyMat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat2} a The first matrix.\r\n * @param {ReadonlyMat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, b,\r\n *  c, d,\r\n *  tx, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, b, 0,\r\n *  c, d, 0,\r\n *  tx, ty, 1]\r\n * </pre>\r\n * The last column is ignored so the array is shorter and operations are faster.\r\n */\n\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat2d(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);\n}\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {ReadonlyMat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to translate\r\n * @param {ReadonlyVec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Calculates a 3x3 matrix from the given quaternion\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {ReadonlyMat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {ReadonlyVec4} result the receiving vector\r\n * @param {ReadonlyVec4} U the first vector\r\n * @param {ReadonlyVec4} V the second vector\r\n * @param {ReadonlyVec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyVec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Gets the angular distance between two unit quaternions\r\n *\r\n * @param  {ReadonlyQuat} a     Origin unit quaternion\r\n * @param  {ReadonlyQuat} b     Destination unit quaternion\r\n * @return {Number}     Angle, in radians, between the two quaternions\r\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Calculate the exponential of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\r\n * Calculate the natural logarithm of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\r\n * Calculate the scalar power of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @param {Number} b amount to scale the quaternion by\r\n * @returns {quat} out\r\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random unit quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyMat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {ReadonlyQuat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {ReadonlyQuat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat} a The first quaternion.\r\n * @param {ReadonlyQuat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat} a The first vector.\r\n * @param {ReadonlyQuat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {ReadonlyVec3} a the initial vector\r\n * @param {ReadonlyVec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {ReadonlyQuat} c the third operand\r\n * @param {ReadonlyQuat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\r\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\r\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\n\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyQuat} q a normalized quaternion\r\n * @param {ReadonlyVec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyVec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyQuat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {ReadonlyMat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {ReadonlyQuat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\n\nexport var getReal = quat.copy;\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {ReadonlyQuat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport var setReal = quat.copy;\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {ReadonlyQuat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat} q quaternion to rotate by\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {quat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {ReadonlyQuat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = quat.dot;\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {ReadonlyQuat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\n\nexport var length = quat.length;\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {ReadonlyQuat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {ReadonlyQuat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\n\nexport function str(a) {\n  return \"quat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \")\";\n}\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat2} a the first dual quaternion.\r\n * @param {ReadonlyQuat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat2} a the first dual quat.\r\n * @param {ReadonlyQuat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {ReadonlyVec2} a The vec2 point to rotate\r\n * @param {ReadonlyVec2} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {ReadonlyVec2} a The first operand\r\n * @param {ReadonlyVec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat2 from \"./mat2.js\";\nimport * as mat2d from \"./mat2d.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as mat4 from \"./mat4.js\";\nimport * as quat from \"./quat.js\";\nimport * as quat2 from \"./quat2.js\";\nimport * as vec2 from \"./vec2.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","export const AssetUrl = process.env.NODE_ENV === \"production\" ? \"/\" : \"http://localhost:8080\";\n","export const arrayConstructorForComponentType = {\n  5120: Int8Array,\n  5121: Uint8Array,\n  5122: Int16Array,\n  5123: Uint16Array,\n  5125: Uint32Array,\n  5126: Float32Array,\n};\n\nexport const glEnumLookup = {\n  9729: \"linear\",\n  9986: \"nearest mipmap linear\",\n  10497: \"repeat\",\n};\n\nexport const numComponentsForAccessorType = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16,\n};\n","import {\n  numComponentsForAccessorType,\n  arrayConstructorForComponentType,\n} from \"./gltf-constants\";\nimport { Accessor } from \"./gltf-types\";\n\nexport function getTypedDataView(\n  buffer: ArrayBuffer,\n  manifest,\n  accessorIndex: number\n) {\n  const accessor: Accessor = manifest.accessors[accessorIndex];\n  const bufferView = manifest.bufferViews[accessor.bufferView];\n  return new arrayConstructorForComponentType[accessor.componentType](\n    buffer,\n    (accessor.byteOffset || 0) + (bufferView.byteOffset || 0),\n    accessor.count * numComponentsForAccessorType[accessor.type]\n  );\n}\n","export function chunkArray(arr, size) {\n  return Array.from({ length: Math.ceil(arr.length / size) }, (v, i) =>\n    arr.slice(i * size, i * size + size)\n  );\n}\n","'use strict'\n\nmodule.exports = angleNormals\n\nfunction hypot(x, y, z) {\n  return Math.sqrt(Math.pow(x,2) + Math.pow(y,2) + Math.pow(z,2))\n}\n\nfunction weight(s, r, a) {\n  return Math.atan2(r, (s - a))\n}\n\nfunction mulAdd(dest, s, x, y, z) {\n  dest[0] += s * x\n  dest[1] += s * y\n  dest[2] += s * z\n}\n\nfunction angleNormals(cells, positions) {\n  var numVerts = positions.length\n  var numCells = cells.length\n\n  //Allocate normal array\n  var normals = new Array(numVerts)\n  for(var i=0; i<numVerts; ++i) {\n    normals[i] = [0,0,0]\n  }\n\n  //Scan cells, and\n  for(var i=0; i<numCells; ++i) {\n    var cell = cells[i]\n    var a = positions[cell[0]]\n    var b = positions[cell[1]]\n    var c = positions[cell[2]]\n\n    var abx = a[0] - b[0]\n    var aby = a[1] - b[1]\n    var abz = a[2] - b[2]\n    var ab = hypot(abx, aby, abz)\n\n    var bcx = b[0] - c[0]\n    var bcy = b[1] - c[1]\n    var bcz = b[2] - c[2]\n    var bc = hypot(bcx, bcy, bcz)\n\n    var cax = c[0] - a[0]\n    var cay = c[1] - a[1]\n    var caz = c[2] - a[2]\n    var ca = hypot(cax, cay, caz)\n\n    if(Math.min(ab, bc, ca) < 1e-6) {\n      continue\n    }\n\n    var s = 0.5 * (ab + bc + ca)\n    var r = Math.sqrt((s - ab)*(s - bc)*(s - ca)/s)\n\n    var nx = aby * bcz - abz * bcy\n    var ny = abz * bcx - abx * bcz\n    var nz = abx * bcy - aby * bcx\n    var nl = hypot(nx, ny, nz)\n    nx /= nl\n    ny /= nl\n    nz /= nl\n\n    mulAdd(normals[cell[0]], weight(s, r, bc), nx, ny, nz)\n    mulAdd(normals[cell[1]], weight(s, r, ca), nx, ny, nz)\n    mulAdd(normals[cell[2]], weight(s, r, ab), nx, ny, nz)\n  }\n\n  //Normalize all the normals\n  for(var i=0; i<numVerts; ++i) {\n    var n = normals[i]\n    var l = Math.sqrt(\n      Math.pow(n[0], 2) +\n      Math.pow(n[1], 2) +\n      Math.pow(n[2], 2))\n    if(l < 1e-8) {\n      n[0] = 1\n      n[1] = 0\n      n[2] = 0\n      continue\n    }\n    n[0] /= l\n    n[1] /= l\n    n[2] /= l\n  }\n\n  return normals\n}\n","import REGL = require(\"regl\");\nimport { getTypedDataView } from \"./gltf-utils\";\nimport { numComponentsForAccessorType, glEnumLookup } from \"./gltf-constants\";\nimport { mat4 } from \"gl-matrix\";\nimport { chunkArray } from \"./utils\";\nimport { AssetUrl } from \"./constants\";\nimport { buildPBRVert, buildPBRFrag } from \"./pbr-shaders\";\nconst calcNormals = require(\"angle-normals\");\n\nexport async function loadImage(imgpath): Promise<HTMLImageElement> {\n  return new Promise((resolve) => {\n    const image = new Image();\n    image.src = `${AssetUrl}/${imgpath}`;\n    image.crossOrigin = \"anonymous\";\n    image.onload = () => resolve(image);\n  });\n}\n\ninterface Material {\n  pbrMetallicRoughness: {\n    baseColorTexture?: any;\n    baseColorFactor?: [number, number, number, number];\n    metallicFactor?: number;\n    roughnessFactor?: number;\n    metallicRoughnessTexture?: any;\n  };\n  normalTexture: any;\n  emissiveTexture: any;\n  occlusionTexture: any;\n  emissiveFactor: [number, number, number];\n}\n\ninterface MaterialUniforms {\n  baseColorFactor?: [number, number, number, number];\n  baseColorTexture?: REGL.Texture2D;\n  metallicFactor?: number;\n  roughnessFactor?: number;\n  metallicRoughnessTexture?: REGL.Texture2D;\n  normalTexture?: REGL.Texture2D;\n  occlusionTexture?: REGL.Texture2D;\n  emissiveTexture?: REGL.Texture2D;\n  emissiveFactor?: [number, number, number];\n}\n\nasync function buildMaterialUniforms(\n  manifest,\n  material: Material,\n  regl: REGL.Regl,\n  assetNamespace: string\n): Promise<MaterialUniforms> {\n  async function loadMaterialTexture(idx, textureFormat = undefined) {\n    const texture = manifest.textures[idx];\n    const uri = manifest.images[texture.source].uri;\n    const image = await loadImage(`${assetNamespace}/${uri}`);\n\n    const samplers = manifest.samplers || [];\n    const sampler = samplers[texture.sampler];\n\n    const mag = glEnumLookup[sampler?.magFilter] || \"nearest\";\n    const min = glEnumLookup[sampler?.minFilter] || \"nearest\";\n    const wrapS = glEnumLookup[sampler?.wrapS] || \"repeat\";\n    const wrapT = glEnumLookup[sampler?.wrapT] || \"repeat\";\n\n    const mipmap = min === \"nearest mipmap linear\";\n\n    return regl.texture({\n      data: image,\n      mag,\n      min,\n      wrapS,\n      wrapT,\n      mipmap,\n      // format: textureFormat || \"rgba\",\n    });\n  }\n\n  let uniforms: MaterialUniforms = {};\n\n  const {\n    baseColorFactor,\n    baseColorTexture,\n    metallicFactor,\n    roughnessFactor,\n    metallicRoughnessTexture,\n  } = material.pbrMetallicRoughness;\n\n  const {\n    normalTexture,\n    occlusionTexture,\n    emissiveTexture,\n    emissiveFactor,\n  } = material;\n\n  uniforms.baseColorFactor = baseColorFactor || [1, 1, 1, 1];\n\n  uniforms.metallicFactor = metallicFactor === undefined ? 1 : metallicFactor;\n  uniforms.roughnessFactor =\n    roughnessFactor === undefined ? 1 : roughnessFactor;\n  uniforms.emissiveFactor = emissiveFactor || [0, 0, 0];\n\n  if (baseColorTexture) {\n    uniforms.baseColorTexture = await loadMaterialTexture(\n      baseColorTexture.index,\n      \"srgb\"\n    );\n  }\n\n  if (metallicRoughnessTexture) {\n    uniforms.metallicRoughnessTexture = await loadMaterialTexture(\n      metallicRoughnessTexture.index\n    );\n  }\n\n  if (normalTexture) {\n    uniforms.normalTexture = await loadMaterialTexture(normalTexture.index);\n  }\n\n  if (occlusionTexture) {\n    uniforms.occlusionTexture = await loadMaterialTexture(\n      occlusionTexture.index\n    );\n  }\n\n  if (emissiveTexture) {\n    uniforms.emissiveTexture = await loadMaterialTexture(emissiveTexture.index);\n  }\n\n  return uniforms;\n}\n\nexport function RenderFactory(manifest, buffer, assetNamespace) {\n  function buildJointMatrixUniforms(skinIdx) {\n    const skin = manifest.skins[skinIdx];\n    const numJoints = manifest.skins[skinIdx].joints.length;\n    const ibmAccessor = skin.inverseBindMatrices;\n    const inverseBindMatrices = chunkArray(\n      getTypedDataView(buffer, manifest, ibmAccessor),\n      numComponentsForAccessorType[\"MAT4\"]\n    );\n\n    function jointMatrixFn(jointIdx) {\n      return (context, props) => {\n        const jointMatrix = mat4.create();\n        mat4.multiply(\n          jointMatrix,\n          props.globalJointTransforms[skin.joints[jointIdx]],\n          inverseBindMatrices[jointIdx]\n        );\n        return jointMatrix;\n      };\n    }\n\n    let uniforms = {};\n\n    for (let i = 0; i < numJoints; i++) {\n      uniforms[`jointMatrix[${i}]`] = jointMatrixFn(i);\n    }\n\n    return uniforms;\n  }\n\n  function buildJointAttributes(regl, primitive) {\n    const jointAccessorIdx = primitive.attributes.JOINTS_0;\n    const jointAccessor = manifest.accessors[jointAccessorIdx];\n    const jointBufferView = manifest.bufferViews[jointAccessor.bufferView];\n\n    const weightAccessorIdx = primitive.attributes.WEIGHTS_0;\n    const weightAccessor = manifest.accessors[weightAccessorIdx];\n    const weightBufferView = manifest.bufferViews[weightAccessor.bufferView];\n\n    return {\n      joint: {\n        buffer: regl.buffer(\n          new Uint16Array(\n            buffer,\n            jointBufferView.byteOffset,\n            jointBufferView.byteLength / 2\n          )\n        ),\n        offset: jointAccessor.byteOffset,\n        stride: jointBufferView.byteStride || 0,\n      },\n      weight: {\n        buffer: regl.buffer(\n          new Float32Array(\n            buffer,\n            weightBufferView.byteOffset,\n            weightBufferView.byteLength / 4\n          )\n        ),\n        offset: weightAccessor.byteOffset,\n        stride: weightBufferView.byteStride || 0,\n      },\n    };\n  }\n\n  function buildRenderFn(regl, meshIdx, skinIdx) {\n    const mesh = manifest.meshes[meshIdx];\n    const fns = mesh.primitives.map(async (primitive) => {\n      const normalAccessorIdx = primitive.attributes.NORMAL;\n      const positionAccessorIdx = primitive.attributes.POSITION;\n      const indicesAccessorIdx = primitive.indices;\n      const indicesData = getTypedDataView(\n        buffer,\n        manifest,\n        indicesAccessorIdx\n      );\n\n      const positionAccessor = manifest.accessors[positionAccessorIdx];\n      const positionBufferView =\n        manifest.bufferViews[positionAccessor.bufferView];\n\n      const normalsAccessor = manifest.accessors[normalAccessorIdx];\n      const normalsBufferView =\n        manifest.bufferViews[normalsAccessor.bufferView];\n\n      // const positionsChunked = chunkArray(\n      //   new Float32Array(\n      //     buffer,\n      //     positionBufferView.byteOffset,\n      //     positionBufferView.byteLength / 4\n      //   ),\n      //   3\n      // );\n\n      let attributes: any = {\n        position: {\n          buffer: regl.buffer(\n            new Float32Array(\n              buffer,\n              positionBufferView.byteOffset,\n              positionBufferView.byteLength / 4\n            )\n          ),\n          offset: positionAccessor.byteOffset,\n          stride: positionBufferView.byteStride,\n        },\n        // normal: calcNormals(chunkArray(indicesData, 3), positionsChunked),\n        normal: {\n          buffer: regl.buffer(\n            new Float32Array(\n              buffer,\n              positionBufferView.byteOffset,\n              positionBufferView.byteLength / 4\n            )\n          ),\n          offset: normalsAccessor.byteOffset,\n          stride: normalsBufferView.byteStride,\n        },\n      };\n\n      if (primitive.attributes.TANGENT !== undefined) {\n        const tangentAccessorIdx = primitive.attributes.TANGENT;\n        const tangentAccessor = manifest.accessors[tangentAccessorIdx];\n        const tangentBufferView =\n          manifest.bufferViews[tangentAccessor.bufferView];\n        attributes[\"aTangent\"] = {\n          buffer: regl.buffer(\n            new Float32Array(\n              buffer,\n              tangentBufferView.byteOffset,\n              tangentBufferView.byteLength / 4\n            )\n          ),\n          offset: tangentAccessor.byteOffset,\n          stride: tangentBufferView.byteStride,\n        };\n      }\n\n      // uvs\n      if (primitive.attributes.TEXCOORD_0 !== undefined) {\n        const uvAccessorIdx = primitive.attributes.TEXCOORD_0;\n        const uvAccessor = manifest.accessors[uvAccessorIdx];\n        const uvBufferView = manifest.bufferViews[uvAccessor.bufferView];\n        attributes[\"uv\"] = {\n          buffer: regl.buffer(\n            new Float32Array(\n              buffer,\n              uvBufferView.byteOffset,\n              uvBufferView.byteLength / 4\n            )\n          ),\n          offset: uvAccessor.byteOffset,\n          stride: uvBufferView.byteStride,\n        };\n      }\n\n      /// material\n      const materialIdx = primitive.material;\n      const material = manifest.materials[materialIdx];\n\n      let uniforms: {\n        sceneTransform: any;\n        modelTransform: any;\n      } & MaterialUniforms = {\n        sceneTransform: (context, props) => props.localTransform,\n        modelTransform: (context, props) => props.modelTransform,\n      };\n\n      if (skinIdx !== undefined) {\n        // build joint matrix\n        uniforms = { ...uniforms, ...buildJointMatrixUniforms(skinIdx) };\n\n        // set joint and weight attributes\n        attributes = {\n          ...attributes,\n          ...buildJointAttributes(regl, primitive),\n        };\n      }\n\n      uniforms = {\n        ...uniforms,\n        ...(await buildMaterialUniforms(\n          manifest,\n          material,\n          regl,\n          assetNamespace\n        )),\n      };\n\n      return {\n        attributes,\n        uniforms,\n        elements: indicesData,\n      };\n    });\n    return fns;\n  }\n\n  return buildRenderFn;\n}\n","import { mat4, quat, vec3 } from \"gl-matrix\";\nimport { RenderFactory } from \"./render-factory\";\nimport { getTypedDataView } from \"./gltf-utils\";\nimport { chunkArray } from \"./utils\";\nimport { numComponentsForAccessorType } from \"./gltf-constants\";\nimport REGL = require(\"regl\");\n\ninterface Animation {\n  name: string;\n  channels: {\n    targetNode: number;\n    targetPath: \"rotation\" | \"translation\";\n    keyframes: any[];\n    keyframeValues: any[];\n    interpolation: \"LINEAR\";\n  }[];\n}\n\ntype NodeIdx = number;\n\nfunction buildLocalTransform(node) {\n  if (node.matrix) {\n    return node.matrix;\n  }\n  return mat4.fromRotationTranslationScale(\n    mat4.create(),\n    node.rotation || quat.create(),\n    node.translation || vec3.create(),\n    node.scale || vec3.fromValues(1, 1, 1)\n  );\n}\n\nexport function buildNodeTransforms(\n  nodes,\n  nodeIdx,\n  parentTransform = mat4.create()\n): Record<NodeIdx, mat4> {\n  const node = nodes[nodeIdx];\n  const localTransform = buildLocalTransform(node);\n  const globalTransform = mat4.multiply(\n    mat4.create(),\n    parentTransform,\n    localTransform\n  );\n\n  let children = {};\n  (node.children || []).forEach((nodeIdx) => {\n    children = {\n      ...children,\n      ...buildNodeTransforms(nodes, nodeIdx, globalTransform),\n    };\n  });\n\n  return { [nodeIdx]: globalTransform, ...children };\n}\n\nfunction getAnimations(manifest, buffer): Animation[] {\n  if (manifest.animations === undefined || manifest.animations.length === 0)\n    return [];\n\n  return manifest.animations.map((animation, idx) => {\n    const name = animation.name || `animation_${idx}`;\n    const channels = animation.channels.map((channel) => {\n      const sampler = animation.samplers[channel.sampler];\n      const interpolation = sampler.interpolation;\n\n      const keyframes = Array.from(\n        getTypedDataView(buffer, manifest, sampler.input)\n      );\n\n      const keyframeValues = chunkArray(\n        getTypedDataView(buffer, manifest, sampler.output),\n        numComponentsForAccessorType[manifest.accessors[sampler.output].type]\n      );\n\n      return {\n        targetNode: channel.target.node,\n        targetPath: channel.target.path,\n        keyframes,\n        keyframeValues,\n        interpolation,\n      };\n    });\n    return { name, channels };\n  });\n}\ntype MeshPrimitivesRecord = Record<\n  NodeIdx,\n  { uniforms: any; attributes: any; elements: any }[]\n>;\n\nexport async function loadMeshPrimitives(\n  regl,\n  manifest,\n  buffer,\n  assetNamespace\n): Promise<MeshPrimitivesRecord> {\n  // TODO: this renderFactory / render naming convention no longer applies...\n  const buildRenderFn = RenderFactory(manifest, buffer, assetNamespace);\n\n  // TODO: make this sync.  fetch textures, and pass to renderFactory.\n  const meshPrimitives = await manifest.nodes.reduce(\n    async (acc, node, nodeIdx) => {\n      if (node.mesh === undefined) return acc;\n      const renderers = await Promise.all(\n        buildRenderFn(regl, node.mesh, node.skin)\n      );\n      (await acc)[nodeIdx] = renderers;\n      return acc;\n    },\n    {}\n  );\n\n  return meshPrimitives;\n\n  // const animations = getAnimations(manifest, buffer);\n  // const shouldPlayAnimation = animations.length !== 0;\n  // const activeAnimation = 0; // idx;\n  // if (args.animationName !== undefined) {\n  //   const animation = animations.find((a) => a.name === args.animationName);\n  //   if (!animation) throw new Error(\"animation not found\");\n  //   animation.channels.forEach((channel) => {\n  //     manifest.nodes[channel.targetNode][\n  //       channel.targetPath\n  //     ] = keyframeValueForTime(\n  //       channel.keyframes,\n  //       channel.keyframeValues,\n  //       args.animationTime || 0\n  //     );\n  //   });\n  // }\n}\n\nexport function buildRenderer(\n  regl,\n  meshes: MeshPrimitivesRecord,\n  shaders,\n  framebuffer = null,\n  customUniforms = {}\n) {\n  // collect renderers per node\n  const renderFns: Record<NodeIdx, REGL.DrawCommand[]> = Object.keys(\n    meshes\n  ).reduce((acc, nodeId) => {\n    acc[nodeId] = meshes[nodeId].flatMap((primitive) => {\n      const { attributes, elements } = primitive;\n      const uniforms = { ...primitive.uniforms, ...customUniforms };\n      return regl({\n        vert: shaders.vertBuilder(attributes, uniforms, 0), // TODO: figure out num joints.\n        frag: shaders.fragBuilder(attributes, uniforms),\n        attributes,\n        uniforms,\n        elements,\n        framebuffer,\n      });\n    });\n\n    return acc;\n  }, {});\n\n  // return a function that invokes them\n  return (modelTransform, nodeTransforms, uniforms = {}) => {\n    Object.entries(renderFns).forEach(([nodeIdx, renderers]) => {\n      renderers.forEach((renderFn) =>\n        renderFn({\n          modelTransform,\n          localTransform: nodeTransforms[nodeIdx],\n          globalJointTransforms: nodeTransforms,\n          ...uniforms,\n        })\n      );\n    });\n  };\n}\n","export const BRDFReflectanceSource = `\nfloat FresnelSchlick(float VdotH) {\n  return pow(1.0 - VdotH, 5.0);\n}\n\nfloat MicrofacetDistribution(float NdotH, float a) {\n  float a2     = a*a;\n  float NdotH2 = NdotH*NdotH;\n  float num   = a2;\n  float denom = (NdotH2 * (a2 - 1.0) + 1.0);\n  denom = pi * denom * denom;\n  return num / max(denom, .00001);\n}\n\nfloat GeometrySchlickGGX(float NdotV, float roughness) {\n  float r = (roughness + 1.0);\n  float k = (r*r) / 8.0;\n\n  float nom   = NdotV;\n  float denom = NdotV * (1.0 - k) + k;\n\n  return nom / denom;\n}\n\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {\n  float NdotV = max(dot(N, V), 0.0);\n  float NdotL = max(dot(N, L), 0.0);\n  float ggx2 = GeometrySchlickGGX(NdotV, roughness);\n  float ggx1 = GeometrySchlickGGX(NdotL, roughness);\n  return ggx1 * ggx2;\n}\n\nvec3 SchlickReflectance(vec3 N, vec3 V, vec3 L, vec3 H, vec3 radiance, vec3 Cdiff, float roughness) {\n  float VdotH = clamp(dot(V, H), 0.0, 1.0);\n  float NdotL = clamp(dot(N, L), 0.0, 1.0);\n  float NdotV = clamp(dot(N, V), 0.0, 1.0);\n  float NdotH = clamp(dot(N, H), 0.0, 1.0);\n  float alpha = roughness * roughness;\n\n  float G = GeometrySmith(N, V, L, roughness);\n  float D = MicrofacetDistribution(NdotH, alpha);\n  float F = FresnelSchlick(VdotH);\n\n  float fspecular = F * G * D / max(4.0 * NdotL * NdotV, .0001);\n  vec3 diffuse = Cdiff / pi;\n  vec3 fdiffuse = (1.0 - F) * diffuse;\n  vec3 Lo = (fdiffuse + fspecular) * radiance * NdotL;\n  return Lo;\n}\n\n`;\n\nexport const shadowMapSamplerSource = `\nfloat inShadow(vec3 fragPosDepthSpace, vec3 normal, vec3 lightDir) {\n  vec3 sampleCoords = fragPosDepthSpace * 0.5 + 0.5;\n  float closest = texture2D(depthSampler, sampleCoords.xy).z;\n\n  if (closest == 1.0) {\n    return 1.0;\n  }\n\n  float current = fragPosDepthSpace.z;\n  float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);  \n  return closest < current - bias ? 0.0 : 1.0;\n}\n`;\n\nexport function buildPBRVert(attributes, uniforms, numJoints = 0) {\n  // prettier-ignore\n  const source = `\n    precision mediump float;\n    \n    uniform mat4 projection, view, modelTransform;\n    ${uniforms.sceneTransform ? `uniform mat4 sceneTransform;` : ``}\n    ${numJoints > 0 ? `uniform mat4 jointMatrix[${numJoints}]` : ``}\n\n    attribute vec3 position;\n    attribute vec3 normal;\n    ${attributes.uv ? `attribute vec2 uv;` : ``}\n    ${attributes.aTangent ? `attribute vec4 aTangent;` : ``}\n    ${attributes.joint ? `attribute vec4 joint;` : ``}\n    ${attributes.weight ? `attribute vec4 weight;` : ``}\n\n    varying vec3 vWorldPos;\n    varying vec3 vNormal;\n    varying mat3 v_TBN;\n    ${attributes.uv ? `varying vec2 vuv;` : ``}\n\n    uniform mat4 depthProjection, depthView;\n    varying vec3 vPosDepthSpace; //TODO: will need w component when dealing with point light shadows.\n\n    void main() {\n      ${numJoints > 0 ? `\n      mat4 skinMatrix = weight.x * jointMatrix[int(joint.x)] +\n                        weight.y * jointMatrix[int(joint.y)] +\n                        weight.z * jointMatrix[int(joint.z)] +\n                        weight.w * jointMatrix[int(joint.w)];\n      ` : ``}\n\n      mat4 localTransform = ${numJoints > 0 ? `skinMatrix;` : `sceneTransform;`}\n      mat4 model = modelTransform * localTransform;\n\n      \n      ${attributes.aTangent ? `\n      vec3 T = normalize(vec3(model * aTangent));\n      vec3 N = normalize(vec3(model * vec4(normal, 0.0)));\n      vec3 B = normalize(cross(N, T));\n      v_TBN = mat3(T,B,N);\n      ` : ``}\n      \n      ${attributes.uv ? `vuv = uv;` : ``}\n      vNormal = mat3(model) * normal;\n      vec4 pos = model * vec4(position, 1.0);\n      vWorldPos = vec3(pos.xyz) / pos.w;\n      vPosDepthSpace = (depthProjection * depthView * pos).xyz;\n      gl_Position = projection * view * pos;\n    }\n  `;\n\n  return source;\n}\n\nexport function buildPBRFrag(attributes, uniforms) {\n  // prettier-ignore\n  const source = `\n\n    precision mediump float;\n    #extension GL_OES_standard_derivatives : enable\n\n    const float pi = 3.141592653;\n    const float GAMMA = 2.2;\n    const float INV_GAMMA = 1.0 / GAMMA;\n\n    uniform vec3 eye;\n    uniform vec3 lightDirection;\n    uniform vec4 baseColorFactor;\n    uniform float metallicFactor;\n    uniform float roughnessFactor;\n    uniform vec3 emissiveFactor;\n\n    varying vec2 vuv;\n    varying vec3 vNormal;\n    varying vec3 vWorldPos;\n    varying mat3 v_TBN;\n\n\n    ${uniforms.baseColorTexture ? `uniform sampler2D baseColorTexture;` : ``}\n    ${uniforms.metallicRoughnessTexture? `uniform sampler2D metallicRoughnessTexture;` : ``}\n    ${uniforms.normalTexture? `uniform sampler2D normalTexture;` : ``}\n    ${uniforms.occlusionTexture? `uniform sampler2D occlusionTexture;` : ``}\n    ${uniforms.emissiveTexture? `uniform sampler2D emissiveTexture;` : ``}\n\n    ${uniforms.depthSampler ? `uniform sampler2D depthSampler;` : ``}\n    varying vec3 vPosDepthSpace; //TODO: will need w component when dealing with point light shadows.\n\n  \n\n    vec3 linearTosRGB(vec3 color) {\n      return pow(color, vec3(INV_GAMMA));\n    }\n    \n    vec3 sRGBToLinear(vec3 srgbIn) {\n      return vec3(pow(srgbIn.xyz, vec3(GAMMA)));\n    }\n\n    vec4 sRGBToLinear(vec4 srgbIn) {\n      return vec4(sRGBToLinear(srgbIn.xyz), srgbIn.w);\n    }\n\n    vec3 getNormal() {\n      ${attributes.aTangent && uniforms.normalTexture ? `\n        vec3 N = texture2D(normalTexture, vuv).rgb;\n        N = v_TBN * normalize(N * 2.0 - 1.0);\n      `: `\n        vec3 N = normalize(vNormal);\n        // vec3 N = normalize(cross(dFdx(vWorldPos), dFdy(vWorldPos)));\n      `}\n      return N;\n    }\n\n    float getMetallic() {\n      ${uniforms.metallicRoughnessTexture \n        ? `float metallic = texture2D(metallicRoughnessTexture, vuv).b * metallicFactor;` \n        : `float metallic = metallicFactor;`\n      }\n      return metallic;\n    }\n\n    float getRoughness() {\n      ${uniforms.metallicRoughnessTexture\n        ? `float roughness = texture2D(metallicRoughnessTexture, vuv).g * roughnessFactor;`\n        : `float roughness = roughnessFactor;`\n      }\n      return roughness;\n    }\n\n    vec4 getBaseColor() {\n      ${uniforms.baseColorTexture\n        ? `vec4 baseColor = baseColorFactor;\n           baseColor *= sRGBToLinear(texture2D(baseColorTexture, vuv));`\n        : `vec4 baseColor = baseColorFactor;`\n      }\n      return baseColor;\n    }\n\n\n\n    ${BRDFReflectanceSource}\n    ${uniforms.depthSampler ? shadowMapSamplerSource : ``}\n\n    void main() {\n      vec4 baseColor = getBaseColor();\n      float metallic = getMetallic();\n      float roughness = getRoughness();\n\n      vec3 ambient = vec3(.05) * baseColor.rgb;\n      vec3 radiance = vec3(5.0); // assumed lightColor\n      \n      vec3 dialectricSpecular = vec3(.04);\n      vec3 black = vec3(0.0);\n      \n      vec3 Cdiff = mix(baseColor.rgb * (1.0 - dialectricSpecular.r), black, metallic);\n      vec3 F0 = mix(dialectricSpecular, baseColor.rgb, metallic);\n      float alpha = roughness * roughness;\n      \n      vec3 N = getNormal();\n      vec3 V = normalize(eye - vWorldPos);\n      vec3 L = normalize(-lightDirection);\n      vec3 H = normalize(L + V);\n      \n      vec3 Lo = SchlickReflectance(N, V, L, H, radiance, Cdiff, roughness);\n      \n      ${uniforms.depthSampler ? `float shadow = inShadow(vPosDepthSpace, N, L);` : `float shadow = 1.0;`}\n      vec3 color = ambient + (shadow * Lo);\n\n      // gamma correction\n      color = linearTosRGB(color);\n\n      gl_FragColor = vec4(color, 1.0);\n    }\n  `\n  return source;\n}\n","// TODO: support skinning\nexport function buildDepthBufferVert() {\n  const src = `\n    precision mediump float;\n    \n    uniform mat4 depthProjection, depthView, modelTransform;\n    uniform mat4 sceneTransform;\n    attribute vec3 position;\n    varying highp float vDepth;\n\n    void main() {\n      mat4 model = modelTransform * sceneTransform;\n      vec4 pos = depthProjection * depthView * model * vec4(position, 1.0);\n      gl_Position = pos;\n      vDepth = pos.z;\n    }\n  `;\n\n  return src;\n}\n\nexport function buildDepthBufferFrag() {\n  const src = `\n    precision mediump float;\n    uniform sampler2D depthMap;\n    varying float vDepth;\n    void main() {\n      gl_FragColor = vec4(vec3(vDepth), 1.0);\n    }\n  `;\n  return src;\n}\n","import { BRDFReflectanceSource, shadowMapSamplerSource } from \"./pbr-shaders\";\nimport { mat4, quat } from \"gl-matrix\";\n\nconst oceanTransform = {\n  translation: [0, 0, 0],\n  rotaton: [90, 0, 0],\n  scale: [1, 1, 1],\n};\n\nfunction createPlane(sx, sy, nx, ny, options) {\n  sx = sx || 1;\n  sy = sy || sx;\n  nx = nx || 1;\n  ny = ny || nx;\n  var quads = options && options.quads ? options.quads : false;\n  var includeUvs = options && options.uvs ? options.uvs : false;\n\n  var positions = [];\n  var uvs = [];\n  var normals = [];\n  var cells = [];\n\n  for (var iy = 0; iy <= ny; iy++) {\n    for (var ix = 0; ix <= nx; ix++) {\n      var u = ix / nx;\n      var v = iy / ny;\n      var x = -sx / 2 + u * sx; // starts on the left\n      var y = sy / 2 - v * sy; // starts at the top\n      positions.push(x, y, 0);\n      if (includeUvs) uvs.push(u, 1.0 - v);\n      normals.push(0, 0, 1);\n      if (iy < ny && ix < nx) {\n        if (quads) {\n          cells.push(\n            iy * (nx + 1) + ix,\n            (iy + 1) * (nx + 1) + ix,\n            (iy + 1) * (nx + 1) + ix + 1,\n            iy * (nx + 1) + ix + 1\n          );\n        } else {\n          cells.push(\n            iy * (nx + 1) + ix,\n            (iy + 1) * (nx + 1) + ix + 1,\n            iy * (nx + 1) + ix + 1\n          );\n          cells.push(\n            (iy + 1) * (nx + 1) + ix + 1,\n            iy * (nx + 1) + ix,\n            (iy + 1) * (nx + 1) + ix\n          );\n        }\n      }\n    }\n  }\n\n  return {\n    positions: positions,\n    normals: normals,\n    uvs: uvs,\n    cells: cells,\n  };\n}\n\nexport function buildDrawOcean(regl) {\n  const plane = createPlane(100, 100, 1000, 1000, null);\n\n  const drawOcean = regl({\n    vert: `\n      precision mediump float;\n      uniform float time;\n      uniform mat4 projection, view, model;\n      uniform mat4 depthProjection, depthView;\n      attribute vec3 position, normal;\n      varying vec3 vWorldPos, vNormal;\n      varying vec3 vPosDepthSpace; //TODO: will need w component when dealing with point light shadows.\n  \n      float random (in vec2 st) {\n        return fract(sin(dot(st.xy,\n                             vec2(12.9898,78.233)))\n                     * 43758.5453123);\n      }\n\n    \n      struct WaveParams {\n        float A; // amplitude\n        float L; // length\n        float S; // speed\n        vec2 D; // direction\n      };\n\n\n      float computeWaveHeight(vec3 pos, float time, WaveParams wave) {\n        // amplitude:\n        float A = wave.A;\n        \n        // wavelength and frequency:\n        float L = wave.L;\n        float f = 2.0 / L;\n\n        // speed:\n        float Phi = wave.S * f;\n\n        // direction:\n        vec2 D = wave.D;\n\n        float sinvalue = sin(dot(normalize(D), pos.xy) * f + (time * Phi));\n        float waveHeight = A * sinvalue;\n\n        return waveHeight;\n      }\n\n      vec3 gerstnerWave(vec3 pos, float time, WaveParams wave) {\n        float f = 2.0 / wave.L;\n        float Q = .75 / f * wave.A; // steepness\n\n        float cosTerm = cos(dot(normalize(wave.D), pos.xy) * f + (time * wave.S * f));\n\n        float x = Q * wave.A * wave.D.x * cosTerm;\n        float y = Q * wave.A * wave.D.y * cosTerm;\n        float z = -computeWaveHeight(pos, time, wave);\n\n        return vec3(x, y, z);\n      }\n\n  \n      void main () {\n        WaveParams w1 = WaveParams(.78, 8.31, 4.0, vec2(1.0, 0.0));\n        WaveParams w2 = WaveParams(.68, 6.40, 3.53, vec2(.7, .121));\n        WaveParams w3 = WaveParams(0.435, 10.75, 1.82, vec2(1.243, .83));\n        WaveParams w4 = WaveParams(0.005, .54, 2.9, vec2(.13, 1.0283));\n        WaveParams w5 = WaveParams(0.134, 2.75, 3.4, vec2(.82, .233));\n\n        vec3 wave =  gerstnerWave(position, time, w1)\n                + gerstnerWave(position, time, w2)\n                + gerstnerWave(position, time, w3)\n                + gerstnerWave(position, time, w4)\n                + gerstnerWave(position, time, w5);\n\n        wave.x += position.x;\n        wave.y += position.y;\n\n\n        wave.z += random(position.xy) / 80.0;\n        vec4 pos = model * vec4(wave, 1.0);\n\n        vWorldPos = pos.xyz / pos.w; \n        vPosDepthSpace = (depthProjection * depthView * pos).xyz;\n        vNormal = normal;\n        gl_PointSize = 3.0;\n        gl_Position = projection * view * pos;\n      }\n    `,\n    frag: `\n      precision mediump float;\n      #extension GL_OES_standard_derivatives : enable\n  \n      uniform vec3 lightDirection, eye;\n      uniform sampler2D depthSampler;\n  \n      varying vec3 vPosDepthSpace; //TODO: will need w component when dealing with point light shadows.\n      varying vec3 vWorldPos, vNormal;\n      const float pi = 3.141592653;\n  \n      ${BRDFReflectanceSource}\n      ${shadowMapSamplerSource}\n  \n      void main () {\n  \n        vec4 oceanBaseColor = vec4(0.0, 0.4, 1.0, 1.0);\n        vec3 Cdiff = oceanBaseColor.rgb * .96;\n        vec3 radiance = vec3(1.0);\n        float roughness = 0.2;\n        vec3 N = normalize(cross(dFdx(vWorldPos), dFdy(vWorldPos)));\n        vec3 V = normalize(eye - vWorldPos);\n        vec3 L = normalize(-lightDirection);\n        vec3 H = normalize(L + V);\n  \n        vec3 Lo = SchlickReflectance(N, V, L, H, radiance, Cdiff, roughness);\n        vec3 ambient = vec3(.5) * oceanBaseColor.xyz;\n  \n        float shadow = inShadow(vPosDepthSpace, N, L);\n        vec3 color = ambient + (shadow * Lo);\n  \n        gl_FragColor = vec4(color, 1.0);\n      }\n    `,\n    attributes: {\n      position: plane.positions,\n      normal: plane.normals,\n    },\n    uniforms: {\n      time: (context, props) => props.time,\n      depthSampler: (context, props: any) => props.depthSampler,\n      model: mat4.fromRotationTranslationScale(\n        mat4.create(),\n        quat.fromEuler(\n          quat.create(),\n          oceanTransform.rotaton[0],\n          oceanTransform.rotaton[1],\n          oceanTransform.rotaton[2]\n        ),\n        oceanTransform.translation as any,\n        oceanTransform.scale as any\n      ),\n    },\n    elements: plane.cells,\n  });\n\n  return drawOcean;\n}\n","function createCube(sx, sy, sz, nx, ny, nz) {\n    if (sx === undefined) sx = 1.0;\n    if (sy === undefined) sy = sx;\n    if (sz === undefined) sz = sx;\n\n    if (nx === undefined) nx = 1.0;\n    if (ny === undefined) ny = nx;\n    if (nz === undefined) nz = nx;\n\n    var x = sx / 2;\n    var y = sy / 2;\n    var z = sz / 2;\n\n    var numVertices = (nx + 1) * (ny + 1) * 2 + (nx + 1) * (nz + 1) * 2 + (nz + 1) * (ny + 1) * 2;\n\n    var vertexIndex = 0;\n    var positions = [];\n    var normals = [];\n    var uvs = [];\n    var cells = [];\n\n    function makePlane(u, v, w, su, sv, nu, nv, pw, flipu, flipv) {\n        var vertShift = vertexIndex;\n        for(var j=0; j<=nv; j++) {\n            for(var i=0; i<=nu; i++) {\n                var vert = positions[vertexIndex] = [0,0,0];\n                vert[u] = (-su/2 + i*su/nu) * flipu;\n                vert[v] = (-sv/2 + j*sv/nv) * flipv;\n                vert[w] = pw\n\n                var normal = normals[vertexIndex] = [0,0,0];\n                normal[u] = 0\n                normal[v] = 0\n                normal[w] = pw/Math.abs(pw);\n\n                var texCoord = uvs[vertexIndex] = [0,0];\n                texCoord[0] = i/nu;\n                texCoord[1] = 1.0 - j/nv;\n\n                ++vertexIndex;\n            }\n        }\n\n        for(var j=0; j<nv; j++) {\n            for(var i=0; i<nu; i++) {\n                var n = vertShift + j * (nu + 1) + i\n                cells.push([n, n + nu  + 1, n + nu + 2]);\n                cells.push([n, n + nu + 2, n + 1]);\n            }\n        }\n    }\n\n     makePlane(0, 1, 2, sx, sy, nx, ny,  sz/2,  1, -1); //front\n     makePlane(0, 1, 2, sx, sy, nx, ny, -sz/2, -1, -1); //back\n     makePlane(2, 1, 0, sz, sy, nz, ny, -sx/2,  1, -1); //left\n     makePlane(2, 1, 0, sz, sy, nz, ny,  sx/2, -1, -1); //right\n     makePlane(0, 2, 1, sx, sz, nx, nz,  sy/2,  1,  1); //top\n     makePlane(0, 2, 1, sx, sz, nx, nz, -sy/2,  1, -1); //bottom\n\n    return {\n        positions: positions,\n        normals: normals,\n        uvs: uvs,\n        cells: cells\n    }\n}\n\nmodule.exports = createCube;\n","import { mat4 } from \"gl-matrix\";\n\nconst primitiveCube = require(\"primitive-cube\");\nconst cube = primitiveCube();\n\nexport function buildDrawDepthCamera(regl, depthCameraEye, depthDim) {\n  const debugDrawDepthCamera = regl({\n    vert: `\n      precision mediump float;\n      uniform mat4 projection, view, translation, scale, targetTo;\n      attribute vec3 position;\n      void main() {\n        gl_Position = projection * view * translation * targetTo * scale * vec4(position, 1.0);\n      }\n    `,\n\n    frag: `\n      precision mediump float;\n      void main() {\n        gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n      }\n    `,\n    attributes: {\n      position: cube.positions,\n    },\n    uniforms: {\n      translation: mat4.fromTranslation([], depthCameraEye),\n      scale: mat4.fromScaling([], [depthDim * 2, depthDim * 2, depthDim * 2]),\n      targetTo: mat4.targetTo([], depthCameraEye, [0, 0, 0], [0, 1, 0]),\n    },\n    elements: cube.cells,\n    primitive: \"lines\",\n  });\n  return debugDrawDepthCamera;\n}\n","import { debug } from \"console\";\nimport { quat, vec2, vec3 } from \"gl-matrix\";\n\nfunction computeWaveHeight(pos, time, wave: Wave) {\n  // amplitude:\n  const A = wave.amplitude;\n\n  // wavelength and frequency:\n  const L = wave.length;\n  const f = 2.0 / L;\n\n  // speed:\n  const Phi = wave.speed * f;\n\n  // direction:\n  const D = wave.direction;\n\n  const waveHeight =\n    A * -Math.sin(vec2.dot(D as any, pos as any) * f + time * Phi);\n\n  return waveHeight;\n}\n\ninterface Wave {\n  amplitude: number;\n  length: number;\n  speed: number;\n  direction: [number, number];\n}\n\n/// pos is xz!\nfunction computeGerstnerWave(pos, time, wave: Wave): [number, number, number] {\n  const f = 2.0 / wave.length;\n  const Q = (0.75 / f) * wave.amplitude;\n\n  const cosTerm = Math.cos(\n    vec2.dot(vec2.normalize([] as any, wave.direction), pos) * f +\n      time * wave.speed * f\n  );\n\n  return [\n    Q * wave.amplitude * wave.direction[0] * cosTerm,\n    -computeWaveHeight(pos, time, wave),\n    Q * wave.amplitude * wave.direction[1] * cosTerm,\n  ];\n}\n\nexport function computeWaveHeightAndNormal(pos, time) {\n  const waves: Wave[] = [\n    { amplitude: 0.78, length: 8.31, speed: 4, direction: [1.0, 0.0] },\n    { amplitude: 0.68, length: 6.4, speed: 3.53, direction: [0.7, 0.121] },\n    { amplitude: 0.435, length: 10.75, speed: 1.82, direction: [1.243, 0.83] },\n    { amplitude: 0.134, length: 2.75, speed: 3.4, direction: [0.82, 0.233] },\n    { amplitude: 0.005, length: 0.54, speed: 2.9, direction: [0.13, 1.0283] },\n  ];\n\n  let wave = [0, 0, 0] as any;\n\n  waves.forEach((waveconfig) => {\n    vec3.add(wave, wave, computeGerstnerWave(pos, time, waveconfig));\n  });\n\n  const height = wave[1];\n\n  const normal = wave;\n  normal[0] /= 5;\n  normal[2] /= 5;\n  normal[1] = 1;\n\n  vec3.normalize(normal, normal);\n\n  return { height, normal };\n}\n\nexport function computeRotationFromWaveNormal(normal, rotationFromWave) {\n  const cross = vec3.cross([] as any, normal, [0, 1, 0]);\n  const waveDotUp = vec3.dot(normal, [0, 1, 0]);\n\n  rotationFromWave[0] = cross[0];\n  rotationFromWave[1] = cross[1];\n  rotationFromWave[2] = cross[2];\n  rotationFromWave[3] =\n    Math.sqrt(\n      Math.pow(vec3.len(normal), 2) * Math.pow(vec3.len([0, 1, 0]), 2)\n    ) + waveDotUp;\n\n  quat.normalize(rotationFromWave, rotationFromWave);\n  return rotationFromWave;\n}\n","// 3x3 plane:\n//\n//  0   1   2   3\n//  4   5   6   7\n//  8   9  10  11\n// 12  13  14  15\nfunction createPlane (sx, sy, nx, ny, options) {\n  sx = sx || 1\n  sy = sy || sx\n  nx = nx || 1\n  ny = ny || nx\n  var quads = (options && options.quads) ? options.quads : false\n\n  var positions = []\n  var uvs = []\n  var normals = []\n  var cells = []\n\n  for (var iy = 0; iy <= ny; iy++) {\n    for (var ix = 0; ix <= nx; ix++) {\n      var u = ix / nx\n      var v = iy / ny\n      var x = -sx / 2 + u * sx // starts on the left\n      var y = sy / 2 - v * sy // starts at the top\n      positions.push([x, y, 0])\n      uvs.push([u, 1.0 - v])\n      normals.push([0, 0, 1])\n      if (iy < ny && ix < nx) {\n        if (quads) {\n          cells.push([iy * (nx + 1) + ix, (iy + 1) * (nx + 1) + ix, (iy + 1) * (nx + 1) + ix + 1, iy * (nx + 1) + ix + 1])\n        } else {\n          cells.push([iy * (nx + 1) + ix, (iy + 1) * (nx + 1) + ix + 1, iy * (nx + 1) + ix + 1])\n          cells.push([(iy + 1) * (nx + 1) + ix + 1, iy * (nx + 1) + ix, (iy + 1) * (nx + 1) + ix])\n        }\n      }\n    }\n  }\n\n  return {\n    positions: positions,\n    normals: normals,\n    uvs: uvs,\n    cells: cells\n  }\n}\n\nmodule.exports = createPlane\n","import { mat4, quat, vec2, vec3 } from \"gl-matrix\";\nimport {\n  computeRotationFromWaveNormal,\n  computeWaveHeightAndNormal,\n} from \"./wave\";\n\nconst primitivePlane = require(\"primitive-plane\");\nconst plane = primitivePlane();\n\nexport function buildDrawRipple(regl, image) {\n  return regl({\n    vert: `\n      precision mediump float;\n      uniform mat4 projection, view, model;\n      attribute vec3 position;\n      attribute vec2 uv;\n      varying vec2 vUv;\n\n      void main() {\n        vUv = uv;\n        gl_Position = projection * view * model * vec4(position, 1.0);\n      }\n    \n    `,\n    frag: `\n      precision mediump float;\n      uniform sampler2D imageSampler;\n      uniform float alpha;\n      varying vec2 vUv;\n\n      void main(){\n        vec4 color = texture2D(imageSampler, vUv);\n        if (color.a < .5) {\n          discard;\n        }\n        color.a = alpha;\n        gl_FragColor = color;\n      }\n    `,\n    uniforms: {\n      imageSampler: regl.texture(image),\n      model: (context, props) => props.transform,\n      alpha: (context, props) => props.alpha,\n    },\n    attributes: {\n      position: plane.positions,\n      uv: plane.uvs,\n    },\n    blend: {\n      enable: true,\n      func: {\n        srcRGB: \"src alpha\",\n        srcAlpha: 1,\n        dstRGB: \"one minus src alpha\",\n        dstAlpha: 1,\n      },\n      equation: {\n        rgb: \"add\",\n        alpha: \"add\",\n      },\n      color: [0, 0, 0, 0],\n    },\n    elements: plane.cells,\n  });\n}\n\nexport interface Ripple {\n  lifetime: number;\n  age: number;\n  endScale: vec3;\n  alpha: number;\n  transform: any;\n  waveRotation: quat;\n}\n\n// build a ripple with a random lifetime\n// lerp alpha by lifetime\n// lerp scale by that lifetime\nexport function updateRipple(ripple: Ripple, dt: number, globalTime: number) {\n  ripple.age += dt;\n  const t = ripple.age / ripple.lifetime;\n  const alpha = vec2.lerp([], [1, 0], [0, 0], t)[0];\n  const scale = vec3.lerp([], [1, 1, 1], ripple.endScale, t);\n\n  ripple.alpha = alpha;\n  ripple.transform.scale = scale;\n\n  if (t > 1.1) {\n    // recycle\n    ripple.age = 0;\n    ripple.alpha = 1.0;\n    ripple.transform.scale = [1, 1, 1];\n  }\n\n  const pos = [\n    ripple.transform.translation[0],\n    ripple.transform.translation[2],\n  ];\n  const waveEffect = computeWaveHeightAndNormal(pos, globalTime);\n  ripple.transform.translation[1] = waveEffect.height;\n\n  ripple.waveRotation = computeRotationFromWaveNormal(\n    waveEffect.normal,\n    ripple.waveRotation\n  );\n\n  return ripple;\n}\n\nexport function createRipple(): Ripple {\n  return {\n    lifetime: Math.random() * 2 + 2,\n    age: 0,\n    endScale: [5, 5, 10],\n    alpha: 1,\n    transform: {\n      translation: [0, 3, 0],\n      rotation: [90, 0, 0],\n      scale: [1, 1, 1],\n    },\n    waveRotation: [0, 0, 0, 0],\n  };\n}\n\nexport function calcRippleTransformMatrix(ripple: Ripple) {\n  return mat4.fromRotationTranslationScale(\n    mat4.create(),\n\n    quat.multiply(\n      [],\n      ripple.waveRotation,\n      quat.fromEuler(\n        quat.create(),\n        ripple.transform.rotation[0],\n        ripple.transform.rotation[1],\n        ripple.transform.rotation[2]\n      )\n    ),\n    ripple.transform.translation as any,\n    ripple.transform.scale as any\n  );\n}\n","'use strict'\n\nfunction mouseButtons(ev) {\n  if(typeof ev === 'object') {\n    if('buttons' in ev) {\n      return ev.buttons\n    } else if('which' in ev) {\n      var b = ev.which\n      if(b === 2) {\n        return 4\n      } else if(b === 3) {\n        return 2\n      } else if(b > 0) {\n        return 1<<(b-1)\n      }\n    } else if('button' in ev) {\n      var b = ev.button\n      if(b === 1) {\n        return 4\n      } else if(b === 2) {\n        return 2\n      } else if(b >= 0) {\n        return 1<<b\n      }\n    }\n  }\n  return 0\n}\nexports.buttons = mouseButtons\n\nfunction mouseElement(ev) {\n  return ev.target || ev.srcElement || window\n}\nexports.element = mouseElement\n\nfunction mouseRelativeX(ev) {\n  if(typeof ev === 'object') {\n    if('offsetX' in ev) {\n      return ev.offsetX\n    }\n    var target = mouseElement(ev)\n    var bounds = target.getBoundingClientRect()\n    return ev.clientX - bounds.left\n  }\n  return 0\n}\nexports.x = mouseRelativeX\n\nfunction mouseRelativeY(ev) {\n  if(typeof ev === 'object') {\n    if('offsetY' in ev) {\n      return ev.offsetY\n    }\n    var target = mouseElement(ev)\n    var bounds = target.getBoundingClientRect()\n    return ev.clientY - bounds.top\n  }\n  return 0\n}\nexports.y = mouseRelativeY\n","'use strict'\n\nmodule.exports = mouseListen\n\nvar mouse = require('mouse-event')\n\nfunction mouseListen (element, callback) {\n  if (!callback) {\n    callback = element\n    element = window\n  }\n\n  var buttonState = 0\n  var x = 0\n  var y = 0\n  var mods = {\n    shift: false,\n    alt: false,\n    control: false,\n    meta: false\n  }\n  var attached = false\n\n  function updateMods (ev) {\n    var changed = false\n    if ('altKey' in ev) {\n      changed = changed || ev.altKey !== mods.alt\n      mods.alt = !!ev.altKey\n    }\n    if ('shiftKey' in ev) {\n      changed = changed || ev.shiftKey !== mods.shift\n      mods.shift = !!ev.shiftKey\n    }\n    if ('ctrlKey' in ev) {\n      changed = changed || ev.ctrlKey !== mods.control\n      mods.control = !!ev.ctrlKey\n    }\n    if ('metaKey' in ev) {\n      changed = changed || ev.metaKey !== mods.meta\n      mods.meta = !!ev.metaKey\n    }\n    return changed\n  }\n\n  function handleEvent (nextButtons, ev) {\n    var nextX = mouse.x(ev)\n    var nextY = mouse.y(ev)\n    if ('buttons' in ev) {\n      nextButtons = ev.buttons | 0\n    }\n    if (nextButtons !== buttonState ||\n      nextX !== x ||\n      nextY !== y ||\n      updateMods(ev)) {\n      buttonState = nextButtons | 0\n      x = nextX || 0\n      y = nextY || 0\n      callback && callback(buttonState, x, y, mods)\n    }\n  }\n\n  function clearState (ev) {\n    handleEvent(0, ev)\n  }\n\n  function handleBlur () {\n    if (buttonState ||\n      x ||\n      y ||\n      mods.shift ||\n      mods.alt ||\n      mods.meta ||\n      mods.control) {\n      x = y = 0\n      buttonState = 0\n      mods.shift = mods.alt = mods.control = mods.meta = false\n      callback && callback(0, 0, 0, mods)\n    }\n  }\n\n  function handleMods (ev) {\n    if (updateMods(ev)) {\n      callback && callback(buttonState, x, y, mods)\n    }\n  }\n\n  function handleMouseMove (ev) {\n    if (mouse.buttons(ev) === 0) {\n      handleEvent(0, ev)\n    } else {\n      handleEvent(buttonState, ev)\n    }\n  }\n\n  function handleMouseDown (ev) {\n    handleEvent(buttonState | mouse.buttons(ev), ev)\n  }\n\n  function handleMouseUp (ev) {\n    handleEvent(buttonState & ~mouse.buttons(ev), ev)\n  }\n\n  function attachListeners () {\n    if (attached) {\n      return\n    }\n    attached = true\n\n    element.addEventListener('mousemove', handleMouseMove)\n\n    element.addEventListener('mousedown', handleMouseDown)\n\n    element.addEventListener('mouseup', handleMouseUp)\n\n    element.addEventListener('mouseleave', clearState)\n    element.addEventListener('mouseenter', clearState)\n    element.addEventListener('mouseout', clearState)\n    element.addEventListener('mouseover', clearState)\n\n    element.addEventListener('blur', handleBlur)\n\n    element.addEventListener('keyup', handleMods)\n    element.addEventListener('keydown', handleMods)\n    element.addEventListener('keypress', handleMods)\n\n    if (element !== window) {\n      window.addEventListener('blur', handleBlur)\n\n      window.addEventListener('keyup', handleMods)\n      window.addEventListener('keydown', handleMods)\n      window.addEventListener('keypress', handleMods)\n    }\n  }\n\n  function detachListeners () {\n    if (!attached) {\n      return\n    }\n    attached = false\n\n    element.removeEventListener('mousemove', handleMouseMove)\n\n    element.removeEventListener('mousedown', handleMouseDown)\n\n    element.removeEventListener('mouseup', handleMouseUp)\n\n    element.removeEventListener('mouseleave', clearState)\n    element.removeEventListener('mouseenter', clearState)\n    element.removeEventListener('mouseout', clearState)\n    element.removeEventListener('mouseover', clearState)\n\n    element.removeEventListener('blur', handleBlur)\n\n    element.removeEventListener('keyup', handleMods)\n    element.removeEventListener('keydown', handleMods)\n    element.removeEventListener('keypress', handleMods)\n\n    if (element !== window) {\n      window.removeEventListener('blur', handleBlur)\n\n      window.removeEventListener('keyup', handleMods)\n      window.removeEventListener('keydown', handleMods)\n      window.removeEventListener('keypress', handleMods)\n    }\n  }\n\n  // Attach listeners\n  attachListeners()\n\n  var result = {\n    element: element\n  }\n\n  Object.defineProperties(result, {\n    enabled: {\n      get: function () { return attached },\n      set: function (f) {\n        if (f) {\n          attachListeners()\n        } else {\n          detachListeners()\n        }\n      },\n      enumerable: true\n    },\n    buttons: {\n      get: function () { return buttonState },\n      enumerable: true\n    },\n    x: {\n      get: function () { return x },\n      enumerable: true\n    },\n    y: {\n      get: function () { return y },\n      enumerable: true\n    },\n    mods: {\n      get: function () { return mods },\n      enumerable: true\n    }\n  })\n\n  return result\n}\n","module.exports = function parseUnit(str, out) {\n    if (!out)\n        out = [ 0, '' ]\n\n    str = String(str)\n    var num = parseFloat(str, 10)\n    out[0] = num\n    out[1] = str.match(/[\\d.\\-\\+]*\\s*(.*)/)[1] || ''\n    return out\n}","'use strict'\n\nvar parseUnit = require('parse-unit')\n\nmodule.exports = toPX\n\nvar PIXELS_PER_INCH = getSizeBrutal('in', document.body) // 96\n\n\nfunction getPropertyInPX(element, prop) {\n  var parts = parseUnit(getComputedStyle(element).getPropertyValue(prop))\n  return parts[0] * toPX(parts[1], element)\n}\n\n//This brutal hack is needed\nfunction getSizeBrutal(unit, element) {\n  var testDIV = document.createElement('div')\n  testDIV.style['height'] = '128' + unit\n  element.appendChild(testDIV)\n  var size = getPropertyInPX(testDIV, 'height') / 128\n  element.removeChild(testDIV)\n  return size\n}\n\nfunction toPX(str, element) {\n  if (!str) return null\n\n  element = element || document.body\n  str = (str + '' || 'px').trim().toLowerCase()\n  if(element === window || element === document) {\n    element = document.body\n  }\n\n  switch(str) {\n    case '%':  //Ambiguous, not sure if we should use width or height\n      return element.clientHeight / 100.0\n    case 'ch':\n    case 'ex':\n      return getSizeBrutal(str, element)\n    case 'em':\n      return getPropertyInPX(element, 'font-size')\n    case 'rem':\n      return getPropertyInPX(document.body, 'font-size')\n    case 'vw':\n      return window.innerWidth/100\n    case 'vh':\n      return window.innerHeight/100\n    case 'vmin':\n      return Math.min(window.innerWidth, window.innerHeight) / 100\n    case 'vmax':\n      return Math.max(window.innerWidth, window.innerHeight) / 100\n    case 'in':\n      return PIXELS_PER_INCH\n    case 'cm':\n      return PIXELS_PER_INCH / 2.54\n    case 'mm':\n      return PIXELS_PER_INCH / 25.4\n    case 'pt':\n      return PIXELS_PER_INCH / 72\n    case 'pc':\n      return PIXELS_PER_INCH / 6\n    case 'px':\n      return 1\n  }\n\n  // detect number of units\n  var parts = parseUnit(str)\n  if (!isNaN(parts[0]) && parts[1]) {\n    var px = toPX(parts[1], element)\n    return typeof px === 'number' ? parts[0] * px : null\n  }\n\n  return null\n}\n","'use strict'\n\nvar toPX = require('to-px')\n\nmodule.exports = mouseWheelListen\n\nfunction mouseWheelListen(element, callback, noScroll) {\n  if(typeof element === 'function') {\n    noScroll = !!callback\n    callback = element\n    element = window\n  }\n  var lineHeight = toPX('ex', element)\n  var listener = function(ev) {\n    if(noScroll) {\n      ev.preventDefault()\n    }\n    var dx = ev.deltaX || 0\n    var dy = ev.deltaY || 0\n    var dz = ev.deltaZ || 0\n    var mode = ev.deltaMode\n    var scale = 1\n    switch(mode) {\n      case 1:\n        scale = lineHeight\n      break\n      case 2:\n        scale = window.innerHeight\n      break\n    }\n    dx *= scale\n    dy *= scale\n    dz *= scale\n    if(dx || dy || dz) {\n      return callback(dx, dy, dz, ev)\n    }\n  }\n  element.addEventListener('wheel', listener)\n  return listener\n}\n","module.exports = identity;\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nfunction identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};","module.exports = perspective;\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nfunction perspective(out, fovy, aspect, near, far) {\n    var f = 1.0 / Math.tan(fovy / 2),\n        nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (2 * far * near) * nf;\n    out[15] = 0;\n    return out;\n};","var identity = require('./identity');\n\nmodule.exports = lookAt;\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nfunction lookAt(out, eye, center, up) {\n    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,\n        eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2],\n        centerx = center[0],\n        centery = center[1],\n        centerz = center[2];\n\n    if (Math.abs(eyex - centerx) < 0.000001 &&\n        Math.abs(eyey - centery) < 0.000001 &&\n        Math.abs(eyez - centerz) < 0.000001) {\n        return identity(out);\n    }\n\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n    if (!len) {\n        x0 = 0;\n        x1 = 0;\n        x2 = 0;\n    } else {\n        len = 1 / len;\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    }\n\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n    if (!len) {\n        y0 = 0;\n        y1 = 0;\n        y2 = 0;\n    } else {\n        len = 1 / len;\n        y0 *= len;\n        y1 *= len;\n        y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n\n    return out;\n};","var mouseChange = require('mouse-change')\nvar mouseWheel = require('mouse-wheel')\nvar identity = require('gl-mat4/identity')\nvar perspective = require('gl-mat4/perspective')\nvar lookAt = require('gl-mat4/lookAt')\n\nmodule.exports = createCamera\n\nvar isBrowser = typeof window !== 'undefined'\n\nfunction createCamera (regl, props_) {\n  var props = props_ || {}\n\n  // Preserve backward-compatibilty while renaming preventDefault -> noScroll\n  if (typeof props.noScroll === 'undefined') {\n    props.noScroll = props.preventDefault;\n  }\n\n  var cameraState = {\n    view: identity(new Float32Array(16)),\n    projection: identity(new Float32Array(16)),\n    center: new Float32Array(props.center || 3),\n    theta: props.theta || 0,\n    phi: props.phi || 0,\n    distance: Math.log(props.distance || 10.0),\n    eye: new Float32Array(3),\n    up: new Float32Array(props.up || [0, 1, 0]),\n    fovy: props.fovy || Math.PI / 4.0,\n    near: typeof props.near !== 'undefined' ? props.near : 0.01,\n    far: typeof props.far !== 'undefined' ? props.far : 1000.0,\n    noScroll: typeof props.noScroll !== 'undefined' ? props.noScroll : false,\n    flipY: !!props.flipY,\n    dtheta: 0,\n    dphi: 0,\n    rotationSpeed: typeof props.rotationSpeed !== 'undefined' ? props.rotationSpeed : 1,\n    zoomSpeed: typeof props.zoomSpeed !== 'undefined' ? props.zoomSpeed : 1,\n    renderOnDirty: typeof props.renderOnDirty !== undefined ? !!props.renderOnDirty : false\n  }\n\n  var element = props.element\n  var damping = typeof props.damping !== 'undefined' ? props.damping : 0.9\n\n  var right = new Float32Array([1, 0, 0])\n  var front = new Float32Array([0, 0, 1])\n\n  var minDistance = Math.log('minDistance' in props ? props.minDistance : 0.1)\n  var maxDistance = Math.log('maxDistance' in props ? props.maxDistance : 1000)\n\n  var ddistance = 0\n\n  var prevX = 0\n  var prevY = 0\n\n  if (isBrowser && props.mouse !== false) {\n    var source = element || regl._gl.canvas\n\n    function getWidth () {\n      return element ? element.offsetWidth : window.innerWidth\n    }\n\n    function getHeight () {\n      return element ? element.offsetHeight : window.innerHeight\n    }\n\n    mouseChange(source, function (buttons, x, y) {\n      if (buttons & 1) {\n        var dx = (x - prevX) / getWidth()\n        var dy = (y - prevY) / getHeight()\n\n        cameraState.dtheta += cameraState.rotationSpeed * 4.0 * dx\n        cameraState.dphi += cameraState.rotationSpeed * 4.0 * dy\n        cameraState.dirty = true;\n      }\n      prevX = x\n      prevY = y\n    })\n\n    mouseWheel(source, function (dx, dy) {\n      ddistance += dy / getHeight() * cameraState.zoomSpeed\n      cameraState.dirty = true;\n    }, props.noScroll)\n  }\n\n  function damp (x) {\n    var xd = x * damping\n    if (Math.abs(xd) < 0.1) {\n      return 0\n    }\n    cameraState.dirty = true;\n    return xd\n  }\n\n  function clamp (x, lo, hi) {\n    return Math.min(Math.max(x, lo), hi)\n  }\n\n  function updateCamera (props) {\n    Object.keys(props).forEach(function (prop) {\n      cameraState[prop] = props[prop]\n    })\n\n    var center = cameraState.center\n    var eye = cameraState.eye\n    var up = cameraState.up\n    var dtheta = cameraState.dtheta\n    var dphi = cameraState.dphi\n\n    cameraState.theta += dtheta\n    cameraState.phi = clamp(\n      cameraState.phi + dphi,\n      -Math.PI / 2.0,\n      Math.PI / 2.0)\n    cameraState.distance = clamp(\n      cameraState.distance + ddistance,\n      minDistance,\n      maxDistance)\n\n    cameraState.dtheta = damp(dtheta)\n    cameraState.dphi = damp(dphi)\n    ddistance = damp(ddistance)\n\n    var theta = cameraState.theta\n    var phi = cameraState.phi\n    var r = Math.exp(cameraState.distance)\n\n    var vf = r * Math.sin(theta) * Math.cos(phi)\n    var vr = r * Math.cos(theta) * Math.cos(phi)\n    var vu = r * Math.sin(phi)\n\n    for (var i = 0; i < 3; ++i) {\n      eye[i] = center[i] + vf * front[i] + vr * right[i] + vu * up[i]\n    }\n\n    lookAt(cameraState.view, eye, center, up)\n  }\n\n  cameraState.dirty = true;\n\n  var injectContext = regl({\n    context: Object.assign({}, cameraState, {\n      dirty: function () {\n        return cameraState.dirty;\n      },\n      projection: function (context) {\n        perspective(cameraState.projection,\n          cameraState.fovy,\n          context.viewportWidth / context.viewportHeight,\n          cameraState.near,\n          cameraState.far)\n        if (cameraState.flipY) { cameraState.projection[5] *= -1 }\n        return cameraState.projection\n      }\n    }),\n    uniforms: Object.keys(cameraState).reduce(function (uniforms, name) {\n      uniforms[name] = regl.context(name)\n      return uniforms\n    }, {})\n  })\n\n  function setupCamera (props, block) {\n    if (typeof setupCamera.dirty !== 'undefined') {\n      cameraState.dirty = setupCamera.dirty || cameraState.dirty\n      setupCamera.dirty = undefined;\n    }\n\n    if (props && block) {\n      cameraState.dirty = true;\n    }\n\n    if (cameraState.renderOnDirty && !cameraState.dirty) return;\n\n    if (!block) {\n      block = props\n      props = {}\n    }\n\n    updateCamera(props)\n    injectContext(block)\n    cameraState.dirty = false;\n  }\n\n  Object.keys(cameraState).forEach(function (name) {\n    setupCamera[name] = cameraState[name]\n  })\n\n  return setupCamera\n}\n","import { mat4, quat, glMatrix, vec3 } from \"gl-matrix\";\nimport REGL = require(\"regl\");\nimport { keyframeValueForTime } from \"./src/animation\";\nimport { AssetUrl } from \"./src/constants\";\nimport {\n  loadMeshPrimitives,\n  buildRenderer,\n  buildNodeTransforms,\n} from \"./src/renderable\";\nimport {\n  buildPBRVert,\n  buildPBRFrag,\n  BRDFReflectanceSource,\n  shadowMapSamplerSource,\n} from \"./src/pbr-shaders\";\nimport {\n  buildDepthBufferVert,\n  buildDepthBufferFrag,\n} from \"./src/depth-buffer-shaders\";\nimport { buildDrawOcean } from \"./src/ocean\";\nimport { buildDrawDepthCamera } from \"./src/debug-depth-camera\";\nimport {\n  computeRotationFromWaveNormal,\n  computeWaveHeightAndNormal,\n} from \"./wave\";\nimport { loadImage } from \"./src/render-factory\";\nimport {\n  buildDrawRipple,\n  calcRippleTransformMatrix,\n  computeRippleScaleAndAlpha,\n  createRipple,\n  Ripple,\n  updateRipple,\n} from \"./ripple\";\n\nasync function fetchglTF(manifestPath, binPath) {\n  const manifest = await fetch(`${AssetUrl}/${manifestPath}`).then((response) =>\n    response.json()\n  );\n\n  const buffer = await fetch(`${AssetUrl}/${binPath}`).then((response) =>\n    response.arrayBuffer()\n  );\n\n  return { manifest, buffer };\n}\n\n// a bufferView is interleaved if bytesForComponentType * numComponents > bufferView.byteStride\n\nwindow.onload = async () => {\n  // const canvas = document.getElementById(\"canvas\") as any;\n  // const context = canvas.getContext(\"webgl\", { antialias: true });\n  const regl = REGL({\n    extensions: [\n      \"oes_element_index_uint\",\n      \"EXT_sRGB\",\n      \"OES_standard_derivatives\",\n    ],\n  });\n  const camera = require(\"regl-camera\")(regl, {\n    damping: 0,\n    // center: [0, 1, 0],\n  });\n\n  const assetNamespace = \"fishing_boat\";\n  const glTFfile = \"scene\";\n  const binFile = \"scene\";\n\n  const { manifest, buffer } = await fetchglTF(\n    `${assetNamespace}/${glTFfile}.gltf`,\n    `${assetNamespace}/${binFile}.bin`\n  );\n\n  console.log(manifest, buffer);\n\n  // assume directional light\n\n  const transform = {\n    translation: [0, 0, 0],\n    rotation: [0, 0, 0],\n    scale: [0.01, 0.01, 0.01],\n  };\n\n  const calcModelTransform = (transform) =>\n    mat4.fromRotationTranslationScale(\n      mat4.create(),\n      quat.fromEuler(\n        quat.create(),\n        transform.rotation[0],\n        transform.rotation[1],\n        transform.rotation[2]\n      ),\n      transform.translation as any,\n      transform.scale as any\n    );\n\n  const projection = mat4.create();\n  const lookAt = mat4.create();\n  const cameraTransform = {\n    eye: [100, 100, 0.00001],\n    look: [0, 0, 0],\n    up: [0, 1, 0],\n  };\n  const cameraContext = regl({\n    context: {\n      projection: function (context) {\n        return mat4.perspective(\n          projection,\n          glMatrix.toRadian(45),\n          context.viewportWidth / context.viewportHeight,\n          0.01,\n          1000\n        );\n      },\n      view: mat4.lookAt(\n        lookAt,\n        cameraTransform.eye as any,\n        cameraTransform.look as any,\n        cameraTransform.up as any\n      ),\n      eye: cameraTransform.eye,\n    },\n    uniforms: {\n      projection: regl.context(\"projection\" as any),\n      view: regl.context(\"view\" as any),\n      eye: regl.context(\"eye\" as any),\n    },\n  });\n\n  const lightContext = regl({\n    context: {\n      lightDirection: (context, props: any) => {\n        return props.lightDirection;\n      },\n    },\n    uniforms: {\n      lightDirection: regl.context(\"lightDirection\" as any),\n    },\n  });\n\n  // TODO: decouple depth camera eye from light direction.\n\n  const lightDirection = [1, -1, 1];\n  const depthCameraEye = vec3.scale([], lightDirection, -1);\n  depthCameraEye[2] += 0.00001;\n\n  // 'createRenderable' is too high level\n  // I need to be able to render to different targets, and the gltf loader shouldn't assume what target I'm rendering to.\n  const boatPrimitives = await loadMeshPrimitives(\n    regl,\n    manifest,\n    buffer,\n    assetNamespace\n  );\n\n  // load buoy\n  const buoyGLTF = await fetchglTF(`buoy/scene.gltf`, `buoy/scene.bin`);\n\n  const buoyPrimitives = await loadMeshPrimitives(\n    regl,\n    buoyGLTF.manifest,\n    buoyGLTF.buffer,\n    \"buoy\"\n  );\n\n  function getNodeTransforms(manifest) {\n    return manifest.scenes[0].nodes.reduce((acc, nodeIdx) => {\n      acc = { ...acc, ...buildNodeTransforms(manifest.nodes, nodeIdx) };\n      return acc;\n    }, {});\n  }\n\n  const boatNodeTransforms = getNodeTransforms(manifest);\n  const buoyNodeTransforms = getNodeTransforms(buoyGLTF.manifest);\n\n  const res = 8192;\n  const depthBuffer = regl.framebuffer({\n    width: res,\n    height: res,\n    depth: true,\n  });\n\n  const depthBufferRenderer = buildRenderer(\n    regl,\n    boatPrimitives,\n    {\n      vertBuilder: buildDepthBufferVert,\n      fragBuilder: buildDepthBufferFrag,\n    },\n    depthBuffer\n  );\n\n  const pbrRenderer = buildRenderer(\n    regl,\n    boatPrimitives,\n    {\n      vertBuilder: buildPBRVert,\n      fragBuilder: buildPBRFrag,\n    },\n    null,\n    { depthSampler: (context, props) => props.depthSampler }\n  );\n\n  const buoyRenderer = buildRenderer(\n    regl,\n    buoyPrimitives,\n    {\n      vertBuilder: buildPBRVert,\n      fragBuilder: buildPBRFrag,\n    },\n    null,\n    { depthSampler: (context, props) => props.depthSampler }\n  );\n\n  const buoyDepthRenderer = buildRenderer(\n    regl,\n    buoyPrimitives,\n    {\n      vertBuilder: buildDepthBufferVert,\n      fragBuilder: buildDepthBufferFrag,\n    },\n    depthBuffer\n  );\n\n  const buoyTransform = {\n    translation: [5, 0, -4],\n    rotation: [0, 0, 0],\n    scale: [0.025, 0.025, 0.025],\n  };\n\n  const depthDim = 5;\n  const depthProjection = mat4.ortho(\n    mat4.create(),\n    -depthDim,\n    depthDim,\n    -depthDim,\n    depthDim,\n    -depthDim,\n    depthDim\n  );\n\n  const depthView = mat4.lookAt(\n    mat4.create(),\n    depthCameraEye,\n    [0, 0, 0],\n    [0, 1, 0]\n  );\n\n  const depthCameraContext = regl({\n    context: {\n      depthProjection: (context, props: any) => props.depthProjection,\n      depthView: (context, props) => props.depthView,\n    },\n    uniforms: {\n      depthProjection: regl.context(\"depthProjection\" as any),\n      depthView: regl.context(\"depthView\" as any),\n    },\n  });\n\n  let debugState = {\n    drawDepthCamera: false,\n  };\n\n  document.addEventListener(\"keydown\", (e) => {\n    if (e.key === \"d\") {\n      debugState.drawDepthCamera = !debugState.drawDepthCamera;\n    }\n  });\n\n  const drawOcean = buildDrawOcean(regl);\n  const debugDrawDepthCamera = buildDrawDepthCamera(\n    regl,\n    depthCameraEye,\n    depthDim\n  );\n  let boatRotationFromWave = quat.create();\n\n  const rippleImage = await loadImage(\"/img/ripple.png\");\n  const drawRipple = buildDrawRipple(regl, rippleImage);\n\n  let ripple = createRipple();\n\n  let dt = 0;\n  let lastTime = 0;\n  regl.frame((context) => {\n    const time = context.time;\n    dt = lastTime === 0 ? 0.016 : time - lastTime;\n    lastTime = time;\n\n    regl.clear({ color: [1, 1, 1, 1], depth: 1 });\n    regl.clear({\n      color: [1, 1, 1, 1],\n      depth: 1,\n      framebuffer: depthBuffer,\n    });\n\n    const boatWave = computeWaveHeightAndNormal(\n      [transform.translation[0], transform.translation[2]],\n      time\n    );\n\n    transform.translation[1] = boatWave.height - 0.2;\n\n    boatRotationFromWave = computeRotationFromWaveNormal(\n      boatWave.normal,\n      boatRotationFromWave\n    );\n\n    const modelTransform = mat4.fromRotationTranslationScale(\n      mat4.create(),\n      boatRotationFromWave,\n      transform.translation as any,\n      transform.scale as any\n    );\n\n    // ripple = updateRipple(ripple, dt, time);\n    // const rippleTransformMatrix = calcRippleTransformMatrix(ripple);\n\n    camera((c) => {\n      lightContext({ lightDirection }, () => {\n        depthCameraContext({ depthProjection, depthView }, () => {\n          if (debugState.drawDepthCamera) {\n            debugDrawDepthCamera();\n          }\n\n          // TODO: I hate this API\n          // bad separation of concerns between glTF and rendering.\n          depthBufferRenderer(modelTransform, boatNodeTransforms);\n\n          pbrRenderer(modelTransform, boatNodeTransforms, {\n            depthSampler: depthBuffer,\n          });\n\n          drawOcean({ depthSampler: depthBuffer, time });\n\n          // drawRipple({\n          //   transform: rippleTransformMatrix,\n          //   alpha: ripple.alpha,\n          // });\n        });\n      });\n    });\n  });\n};\n"]}